<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.microservice.admin.mapper.OrganizationMapper" >
  <resultMap id="BaseResultMap" type="com.microservice.admin.entity.Organization">
        <id column="ORGANIZATION_ID" property="organizationId" jdbcType="VARCHAR" />
        <result column="ORGANIZATION_NAME" property="organizationName" jdbcType="VARCHAR" />
        <result column="PARENT_ID" property="parentId" jdbcType="VARCHAR" />
        <result column="ADDRESS" property="address" jdbcType="VARCHAR" />
        <result column="ORDER_NUM" property="orderNum" jdbcType="INTEGER" />
        <result column="ORG_TYPE" property="orgType" jdbcType="INTEGER" />
        <result column="ADDR_CODE" property="addrCode" jdbcType="VARCHAR" />
        <result column="PHONE" property="phone" jdbcType="VARCHAR" />
        <result column="INFO" property="info" jdbcType="VARCHAR" />
        <result column="STATUS" property="status" jdbcType="INTEGER" />
        <result column="CREATE_DATE" property="createDate" jdbcType="TIMESTAMP" />
        <result column="CREATOR" property="creator" jdbcType="BIGINT" />
        <result column="UPDATE_DATE" property="updateDate" jdbcType="TIMESTAMP" />
        <result column="UPDATOR" property="updator" jdbcType="BIGINT" />
        <result column="GIS_X" property="gisX" jdbcType="DECIMAL" />
        <result column="GIS_Y" property="gisY" jdbcType="DECIMAL" />
  </resultMap>
  
  <resultMap id="BaseResultOrganizationAdminMap" type="com.microservice.admin.entity.OrganizationRole">
        <id column="ORGANIZATION_ID" property="organizationId" jdbcType="VARCHAR" />
        <result column="ORGANIZATION_NAME" property="organizationName" jdbcType="VARCHAR" />
        <result column="PARENT_ID" property="parentId" jdbcType="VARCHAR" />
        <result column="ROLE_ID" property="roleId" jdbcType="VARCHAR" />
        
        <collection property="children" select="getOrganization" column="{ORGANIZATION_ID=ORGANIZATION_ID,roleId=ROLE_ID}"></collection>
        <collection property="admin" select="getAdmin" column="{organizationId=ORGANIZATION_ID,roleId=ROLE_ID}"></collection>      <!--   {organizationId=ORGANIZATION_ID,roleId=roleId} -->
  </resultMap>
  
  <resultMap id="BaseResultAdminMap" type="com.microservice.admin.entity.Admin">
         <id column="ADMIN_ID" property="adminId" jdbcType="VARCHAR" />
        <result column="ADMIN_NAME" property="adminName" jdbcType="VARCHAR" />
        <result column="REAL_NAME" property="realName" jdbcType="VARCHAR" />
  </resultMap>
  
  
  <sql id="Base_Column_List" >
     ORGANIZATION_ID, ORGANIZATION_NAME, PARENT_ID, ADDRESS, ORDER_NUM, ORG_TYPE, ADDR_CODE, PHONE, INFO, STATUS, CREATE_DATE, CREATOR, UPDATE_DATE, UPDATOR, GIS_X, GIS_Y
  </sql>
  <sql id="Base_Column_List_Admin" >
    a.ADMIN_ID,a. ADMIN_NAME,a.REAL_NAME<!-- , PASSWORD, EMAIL, PHONE, STATUS, CREATE_ADMIN_ID, ORGANIZATION_ID, ORGANIZATION_NAME, CREATE_TIME, UPDATE_TIME, GENDER, ADMIN_LOGO, REMARK, GRADE -->
   </sql>
  
  <select id="find" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from TB_ORGANIZATION
    where ORGANIZATION_ID = #{organizationId,jdbcType=INTEGER}
  </select>
  
  <delete id="delete" parameterType="java.lang.String" >
    delete from TB_ORGANIZATION
    where ORGANIZATION_ID = #{organizationId,jdbcType=INTEGER}
  </delete>
  
  <insert id="add" parameterType="com.microservice.admin.entity.Organization">
    insert into TB_ORGANIZATION
    <trim prefix="(" suffix=")" suffixOverrides=",">
        <if test="organizationId != null">
        ORGANIZATION_ID,
        </if>
        <if test="organizationName != null">
        ORGANIZATION_NAME,
        </if>
        <if test="parentId != null">
        PARENT_ID,
        </if>
        <if test="address != null">
        ADDRESS,
        </if>
        <if test="orderNum != null">
        ORDER_NUM,
        </if>
        <if test="orgType != null">
        ORG_TYPE,
        </if>
        <if test="addrCode != null">
        ADDR_CODE,
        </if>
        <if test="phone != null">
        PHONE,
        </if>
        <if test="info != null">
        INFO,
        </if>
        <if test="status != null">
        STATUS,
        </if>
        <if test="createDate != null">
        CREATE_DATE,
        </if>
        <if test="creator != null">
        CREATOR,
        </if>
        <if test="updateDate != null">
        UPDATE_DATE,
        </if>
        <if test="updator != null">
        UPDATOR,
        </if>
        <if test="gisX != null">
        GIS_X,
        </if>
        <if test="gisY != null">
        GIS_Y,
        </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
        <if test="organizationId != null">
        #{organizationId,jdbcType=VARCHAR},
        </if>
        <if test="organizationName != null">
        #{organizationName,jdbcType=VARCHAR},
        </if>
        <if test="parentId != null">
        #{parentId,jdbcType=VARCHAR},
        </if>
        <if test="address != null">
        #{address,jdbcType=VARCHAR},
        </if>
        <if test="orderNum != null">
        #{orderNum,jdbcType=INTEGER},
        </if>
        <if test="orgType != null">
        #{orgType,jdbcType=INTEGER},
        </if>
        <if test="addrCode != null">
        #{addrCode,jdbcType=VARCHAR},
        </if>
        <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
        </if>
        <if test="info != null">
        #{info,jdbcType=VARCHAR},
        </if>
        <if test="status != null">
        #{status,jdbcType=INTEGER},
        </if>
        <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
        </if>
        <if test="creator != null">
        #{creator,jdbcType=BIGINT},
        </if>
        <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
        </if>
        <if test="updator != null">
        #{updator,jdbcType=BIGINT},
        </if>
        <if test="gisX != null">
        #{gisX,jdbcType=DECIMAL},
        </if>
        <if test="gisY != null">
        #{gisY,jdbcType=DECIMAL},
        </if>
    </trim>
  </insert>
  
  <update id="update" parameterType="com.microservice.admin.entity.Organization">
    update TB_ORGANIZATION
    <set>
        <if test="organizationName != null">
        ORGANIZATION_NAME = #{organizationName,jdbcType=VARCHAR},
        </if>
        <if test="parentId != null">
        PARENT_ID = #{parentId,jdbcType=INTEGER},
        </if>
        <if test="address != null">
        ADDRESS = #{address,jdbcType=VARCHAR},
        </if>
        <if test="orderNum != null">
        ORDER_NUM = #{orderNum,jdbcType=INTEGER},
        </if>
        <if test="orgType != null">
        ORG_TYPE = #{orgType,jdbcType=INTEGER},
        </if>
        <if test="addrCode != null">
        ADDR_CODE = #{addrCode,jdbcType=VARCHAR},
        </if>
        <if test="phone != null">
        PHONE = #{phone,jdbcType=VARCHAR},
        </if>
        <if test="info != null">
        INFO = #{info,jdbcType=VARCHAR},
        </if>
        <if test="status != null">
        STATUS = #{status,jdbcType=INTEGER},
        </if>
        <if test="createDate != null">
        CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
        </if>
        <if test="creator != null">
        CREATOR = #{creator,jdbcType=BIGINT},
        </if>
        <if test="updateDate != null">
        UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
        </if>
        <if test="updator != null">
        UPDATOR = #{updator,jdbcType=BIGINT},
        </if>
        <if test="gisX != null">
        GIS_X = #{gisX,jdbcType=DECIMAL},
        </if>
        <if test="gisY != null">
        GIS_Y = #{gisY,jdbcType=DECIMAL},
        </if>
    </set>
    where ORGANIZATION_ID = #{organizationId,jdbcType=VARCHAR}
  </update>
  
  <update id="updateByMap" parameterType="java.util.Map">
    update TB_ORGANIZATION
    <set>
        <foreach collection="params" index="key" item="value" separator=", ">
            <if test="key != 'where'">
            	<if test="value.toString()=='now'">
            		${key} = sysdate
            	</if>
            	<if test="value.toString()!='now'">
            		${key} = #{value}
            	</if>
            </if>
        </foreach>
    </set>
    <where>
        <if test="params.where==null">
            1=0
        </if>
        <if test="params.where!=null">
            <foreach collection="params.where" index="key" item="value" separator=" and ">
            	<if test="key.indexOf('min') gt -1">
            		<if test="value.toString()=='now'">
            			${key.substring(3)} &gt; sysdate
	            	</if>
	            	<if test="value.toString()!='now'">
	            		${key.substring(3)} &gt; #{value}
	            	</if>
        		</if>
        		<if test="key.indexOf('max') gt -1">
        			<if test="value.toString()=='now'">
            			${key.substring(3)} &lt; sysdate
	            	</if>
	            	<if test="value.toString()!='now'">
	            		${key.substring(3)} &lt; #{value}
	            	</if>
        		</if>
        		<if test="key.indexOf('like') gt -1">
        			${key.substring(4)} like #{value}
        		</if>
        		<if test="key.indexOf('min') == -1 and key.indexOf('max') == -1 and key.indexOf('like') == -1">
            		${key} = #{value}
        		</if>
            </foreach>
        </if>
    </where>
  </update>
 
  <select id="searchRequest" resultMap="BaseResultMap" parameterType="common.search.entity.SearchRequest">
		select
		<include refid="Base_Column_List" />
		from
        
        <if test='pageSize ==null or pageSize ==0'>
			TB_ORGANIZATION ${where} 
	        <if test='orderBy !=null and orderBy !=""'>
				order by ${orderBy}
			</if>
			<if test='orderBy ==null or orderBy ==""'>
				order by PARENT_ID, ORDER_NUM desc
			</if>
		</if>
        
        <if test='pageSize !=null and pageSize>0'>
			(select ROWNUM as rn, 
			<include refid="Base_Column_List" />
			from(
				select 
				<include refid="Base_Column_List" />
				from TB_ORGANIZATION ${where}
				<if test='orderBy !=null and orderBy !=""'>
					order by ${orderBy}
				</if>
				<if test='orderBy ==null or orderBy ==""'>
					order by PARENT_ID, ORDER_NUM desc
				</if>
				)t1 order by rn
			)t2 where rn between 1 and ${pageSize} 
		</if>
	</select>
  <select id="searchRequestRole" resultMap="BaseResultOrganizationAdminMap" parameterType="common.search.entity.SearchRequest">
		<!-- 	a.*,b.admin_name  -->  
		select 	
			<if test='where ==null or where ==""'>
				a.*,'' as ROLE_ID
			</if>	
			<if test='where !=null and  where !=""'>
				a.*,${data.roleId} as ROLE_ID
			</if>	
		<!-- <include refid="Base_Column_List" /> -->
			from TB_ORGANIZATION a
			inner join TB_ADMIN b on  a.ORGANIZATION_ID=b.ORGANIZATION_ID
<!-- 			<if test='where !=null or where !=""'>
					inner join TB_ADMIN_ROLE c on b.ADMIN_ID=c.ADMIN_ID
					${where}
			</if> -->		
				where PARENT_ID=0			
	</select>
  <select id="searchRequestRole1" resultMap="BaseResultOrganizationAdminMap" parameterType="common.search.entity.SearchRequest">
		<!-- 	a.*,b.admin_name  -->  
		select 	a.*
		<!-- <include refid="Base_Column_List" /> -->
			from TB_ORGANIZATION a
			inner join TB_ADMIN b on  a.ORGANIZATION_ID=b.ORGANIZATION_ID
			<if test='where ==null or where ==""'>
				where PARENT_ID=0
			</if>					
	</select>
  <select id="getOrganization" resultMap="BaseResultOrganizationAdminMap" >
  		select  

  		<include refid="Base_Column_List" />
  		
  			<!-- ,nvl(${roleId},-1) as ROLE_ID -->
  			
  			<if test='roleId ==null or roleId ==""'>
			,'' as ROLE_ID
			</if>			
			<if test='roleId !=null and roleId !=""'>
			,${roleId} as ROLE_ID
			</if>	
  			
			from TB_ORGANIZATION a where PARENT_ID !=ORGANIZATION_ID and PARENT_ID=#{ORGANIZATION_ID}
	
	</select>
  <select id="getAdmin" resultMap="BaseResultAdminMap">
  			select  
  			<include refid="Base_Column_List_Admin" />
			from TB_ADMIN a 
			<if test='roleId ==null or roleId ==""'>
			where a.ORGANIZATION_ID=#{organizationId}		
			</if>			
			<if test='roleId !=null and roleId !=""'>
			inner join TB_ADMIN_ROLE c on a.ADMIN_ID=c.ADMIN_ID				
			where a.ORGANIZATION_ID=#{organizationId}
			and c.role_id=#{roleId}	
			</if>			
		<!-- 	inner join TB_ADMIN_ROLE c on a.ADMIN_ID=c.ADMIN_ID		 -->		
		<!-- 	where a.ORGANIZATION_ID=#{ORGANIZATION_ID} -->
<!-- 		and c.role_id=#{roleId} -->
	</select>
	
	
	<select id="count" resultType="java.lang.Integer" parameterType="common.search.entity.SearchRequest">
		select count(0) from TB_ORGANIZATION ${where}
	</select>
	
	<select id="pageRequest" resultMap="BaseResultMap" parameterType="common.search.entity.PageRequest">
		select
		<include refid="Base_Column_List" />
		from(
		select ROWNUM as rn,
        <include refid="Base_Column_List" />
        from(
	        select 
	        <include refid="Base_Column_List" />
	        from TB_ORGANIZATION ${where} 
			<if test='orderBy !=null and orderBy !=""'>
				order by ${orderBy}
			</if>
			<if test='orderBy ==null or orderBy ==""'>
				order by PARENT_ID, ORDER_NUM desc
			</if>
			)t1 order by rn
		)t2 where rn between ${indexFrom+1} and (${indexFrom}+${pageSize})
	</select>

    <select id="searchRequestAbove" resultMap="BaseResultMap" parameterType="common.search.entity.SearchRequest">
        select
        <include refid="Base_Column_List" />
        from

        <if test='request.pageSize ==null or request.pageSize ==0'>
            TB_ORGANIZATION ${request.where}
            start with organization_id = #{organizationId}
            connect by prior parent_id = organization_id
            <if test='request.orderBy !=null and request.orderBy !=""'>
                order by ${request.orderBy}
            </if>
            <if test='request.orderBy ==null or request.orderBy ==""'>
                order by PARENT_ID, ORDER_NUM desc
            </if>
        </if>

        <if test='request.pageSize !=null and request.pageSize>0'>
            (select ROWNUM as rn,
            <include refid="Base_Column_List" />
            from(
            select
            <include refid="Base_Column_List" />
            from TB_ORGANIZATION ${request.where}
            start with organization_id = #{organizationId}
            connect by prior parent_id = organization_id
            <if test='request.orderBy !=null and request.orderBy !=""'>
                order by ${request.orderBy}
            </if>
            <if test='request.orderBy ==null or request.orderBy ==""'>
                order by PARENT_ID, ORDER_NUM desc
            </if>
            )t1 order by rn
            )t2 where rn between 1 and ${request.pageSize}
        </if>
    </select>
    <select id="searchRequestBelow" resultMap="BaseResultMap" parameterType="common.search.entity.SearchRequest">
        select
        <include refid="Base_Column_List" />
        from

        <if test='request.pageSize ==null or request.pageSize ==0'>
            TB_ORGANIZATION ${request.where}
            start with organization_id = #{organizationId}
            connect by prior   organization_id=parent_id
            <if test='request.orderBy !=null and request.orderBy !=""'>
                order by ${request.orderBy}
            </if>
            <if test='request.orderBy ==null or request.orderBy ==""'>
                order by PARENT_ID, ORDER_NUM desc
            </if>
        </if>

        <if test='request.pageSize !=null and request.pageSize>0'>
            (select ROWNUM as rn,
            <include refid="Base_Column_List" />
            from(
            select
            <include refid="Base_Column_List" />
            from TB_ORGANIZATION ${request.where}
            start with organization_id = #{organizationId}
            connect by prior  organization_id=parent_id
            <if test='request.orderBy !=null and request.orderBy !=""'>
                order by ${request.orderBy}
            </if>
            <if test='request.orderBy ==null or request.orderBy ==""'>
                order by PARENT_ID, ORDER_NUM desc
            </if>
            )t1 order by rn
            )t2 where rn between 1 and ${request.pageSize}
        </if>
    </select>

</mapper>
